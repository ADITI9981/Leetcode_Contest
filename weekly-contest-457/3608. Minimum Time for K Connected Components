class DSU{
public:
     vector<int> parent;
    int components;
    DSU(int n){
        parent.resize(n);
        //rank.resize(n,0);
        iota(parent.begin(),parent.end(),0);
        components = n;
    }
    int find(int x){
        if(x!=parent[x]) parent[x] = find(parent[x]);
        return parent[x];
    }
    void unite(int x,int y){
        int px = find(x),py=find(y);
        if(px!=py){
            parent[px]=py;
            components--;
        }
        
    }
};
class Solution {
public:
    int minTime(int n, vector<vector<int>>& edges, int k) {
        if(k>n) return -1;
        int low =0,high =0;

        for(auto&e : edges){
            high = max(high,e[2]);
        }
        int ans =-1;

        while(low<=high){
            int mid = (low+high)/2;
            DSU dsu(n);
            for(auto&e:edges){
                if(e[2]>mid){
                    dsu.unite(e[0],e[1]);
                }
            }
            if(dsu.components>=k){
                ans = mid;
                high = mid-1;
            }else{
                low = mid +1;
            }
        }
        return ans;
    }
};
