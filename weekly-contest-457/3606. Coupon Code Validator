class Solution {
public:

    bool isValidCode(const string& s){
        if(s.empty()) return false;
        for(char c:s){
            if(!isalnum(c) && c !='_') return false;
        }
        return true;
    }
    vector<string> validateCoupons(vector<string>& code, vector<string>& businessLine, vector<bool>& isActive) {
        vector<string>validTypes = {"electronics","grocery","pharmacy","restaurant"};
        unordered_map<string,int> order={
            {"electronics",0},
            {"grocery",1},
            {"pharmacy",2},
            {"restaurant",3}
        };
        vector<pair<string,string>>valid;
        for(int i=0;i<code.size();++i){
            if(isValidCode(code[i]) && order.count(businessLine[i]) && isActive[i]){
                valid.push_back({businessLine[i],code[i]});
            }
        }
        sort(valid.begin(),valid.end(),[&](const pair<string,string>& a, const pair<string,string>& b){
            if(order[a.first]== order[b.first]){
                return a.second<b.second;
            }
            return order[a.first]<order[b.first];
        });
        vector<string> result;
        for(const auto&p :valid){
            result.push_back(p.second);
        }
        return result;
    }
};
