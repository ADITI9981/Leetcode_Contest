class Solution {
public:
    vector<int> processQueries(int c, vector<vector<int>>& connections, vector<vector<int>>& queries) {
        vector<int> parent(c+1);
        for(int i=0;i<=c;++i) parent[i]=i;
        function<int(int)> find = [&](int x){
            if(x !=parent[x]) parent[x]= find(parent[x]);
            return parent[x];
        };

        auto unite = [&](int a, int b){
            int pa = find(a),pb = find(b);
            if (pa!=pb) parent[pb] = pa;
        };
        for(auto& conn:connections){
            unite(conn[0],conn[1]);
        }
        unordered_map<int,set<int>> componentOnline;
        for(int i=1;i<=c;++i){
            componentOnline[find(i)].insert(i);
        }
        vector<bool> isOnline(c+1,true);
        vector<int> result;

        for(auto& q :queries){
            int type = q[0],x=q[1];
            int root = find(x);

            if(type==1){
                if(isOnline[x]){
                    result.push_back(x);
                }else if(!componentOnline[root].empty()){
                    result.push_back(*componentOnline[root].begin());
                }else{
                    result.push_back(-1);
                }
            }else if (type ==2){
                if(isOnline[x]){
                    isOnline[x] = false;
                    componentOnline[root].erase(x);
                }
            }
        }
        return result;
      }
};
